KR_INT 1 int
IDN 1 main
L_ZAGRADA 1 (
KR_VOID 1 void
D_ZAGRADA 1 )
L_VIT_ZAGRADA 2 {
KR_INT 3 int
IDN 3 x
OP_PRIDRUZI 3 =
BROJ 3 5
TOCKAZAREZ 3 ;
KR_INT 4 int
IDN 4 y
OP_PRIDRUZI 4 =
BROJ 4 6
TOCKAZAREZ 4 ;
KR_INT 5 int
IDN 5 a
OP_PRIDRUZI 5 =
IDN 5 x
PLUS 5 +
IDN 5 y
TOCKAZAREZ 5 ;
KR_INT 6 int
IDN 6 i
OP_PRIDRUZI 6 =
BROJ 6 0
TOCKAZAREZ 6 ;
KR_FOR 7 for
L_ZAGRADA 7 (
IDN 7 i
OP_PRIDRUZI 7 =
BROJ 7 0
TOCKAZAREZ 7 ;
IDN 7 i
OP_LT 7 <
IDN 7 a
TOCKAZAREZ 7 ;
OP_INC 7 ++
IDN 7 i
D_ZAGRADA 7 )
L_VIT_ZAGRADA 8 {
KR_CHAR 9 char
IDN 9 q
OP_PRIDRUZI 9 =
L_ZAGRADA 9 (
KR_CHAR 9 char
D_ZAGRADA 9 )
BROJ 9 63
TOCKAZAREZ 9 ;
KR_IF 10 if
L_ZAGRADA 10 (
IDN 10 i
OP_EQ 10 ==
BROJ 10 10
D_ZAGRADA 10 )
L_VIT_ZAGRADA 11 {
KR_BREAK 12 break
TOCKAZAREZ 12 ;
D_VIT_ZAGRADA 13 }
KR_INT 14 int
IDN 14 p
OP_PRIDRUZI 14 =
BROJ 14 0
TOCKAZAREZ 14 ;
KR_WHILE 15 while
L_ZAGRADA 15 (
IDN 15 p
OP_LT 15 <
BROJ 15 100
D_ZAGRADA 15 )
L_VIT_ZAGRADA 16 {
OP_INC 17 ++
IDN 17 p
TOCKAZAREZ 17 ;
D_VIT_ZAGRADA 18 }
KR_IF 19 if
L_ZAGRADA 19 (
IDN 19 i
OP_EQ 19 ==
BROJ 19 11
D_ZAGRADA 19 )
KR_CONTINUE 19 continue
TOCKAZAREZ 19 ;
D_VIT_ZAGRADA 20 }
KR_RETURN 21 return
BROJ 21 0
TOCKAZAREZ 21 ;
D_VIT_ZAGRADA 22 }
